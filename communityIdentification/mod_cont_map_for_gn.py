import numpy as np
import sys
import os
#from math import exp
#from Bio.PDB import *


'''
This script simply takes a contact map (generated by make_contact_map.py) and modifies it such
that it is exclusively a binary contact map - ie, in the orig contact map, a line starts w/info
such as the following:
3 4  LEU B      
The generates a new contact map w/o this (the binary-only file format is needed by gncommunities).
'''

##  usage:  python mod_cont_map_for_gn.py d2elca1_cont_map.txt d2elca1_cont_map_BIN.txt

#  If the user did not enter the correct number of args, notify the user and terminate the program
if (len(sys.argv) != 3):
   sys.stderr.write("Usage: " + sys.argv[0] + " <input_pdb> <heavy/ca> <distance_cutoff> \n")
   sys.stderr.write("where:\n")
   sys.stderr.write("   <input_non_binary_contact_map>\n")
   sys.stderr.write("   <output_binary_contact_map>\n")
   sys.exit()


###  Assign input variable:
input_non_binary_contact_map = sys.argv[1]
input_non_binary_contact_map_to_read = open(input_non_binary_contact_map, "r")
output_binary_contact_map = sys.argv[2]
output_binary_contact_map_to_write = open(output_binary_contact_map, "w")


for line in input_non_binary_contact_map_to_read:
	line_elements = list()
	line_elements = line.split()
	i = 4
	while i < len(line_elements):
		output_binary_contact_map_to_write.write(str(line_elements[i]) + " ",)
		i += 1
	output_binary_contact_map_to_write.write("\n")


##  Close files
input_non_binary_contact_map_to_read.close()
output_binary_contact_map_to_write.close()

